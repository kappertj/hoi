---
- name: Ensure gitops directories exist
  vars:
    gitops_component: groupsync
  ansible.builtin.include_tasks:
    file: create_gitops_dirs.yml

- name: slurp CA and create
  loop: "{{ oauths }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.cafile is defined
    - item.groupsync is defined
  ansible.builtin.include_tasks: groupsync_slurp_and_create_ca.yml

- name: Configure oauth bind passwords sealed-secret
  vars:
    secret_template: "{{ lookup('template', 'oauth/oauths-bindpw.yml.j2') | from_yaml }}"
    apply_to_cluster: false
    sealed_secret_file: "{{ openshift_gitops_dir }}/groupsync/assets/ldap-bind-password-{{ item.name }}.yaml"
  loop: "{{ oauths }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.type | default('LDAP') == 'LDAP'
    - item.groupsync is defined
  ansible.builtin.include_tasks: create_sealed_secret.yml

- name: Configure LDAP bind passwords sealed-secret
  vars:
    secret_template: "{{ lookup('template', 'groupsync/ldap-bindpw.yml.j2') | from_yaml }}"
    apply_to_cluster: false
    sealed_secret_file: "{{ openshift_gitops_dir }}/groupsync/assets/ldap-bind-password-{{ item.name }}.yaml"
  loop: "{{ oauths }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.type | default('LDAP') == 'LDAP'
    - item.groupsync is defined
  ansible.builtin.include_tasks: create_sealed_secret.yml

- name: Configure OpenID bind passwords sealed-secret
  vars:
    secret_template: "{{ lookup('template', 'groupsync/openid-connect-secret.yml.j2') | from_yaml }}"
    apply_to_cluster: false
    sealed_secret_file: "{{ openshift_gitops_dir }}/groupsync/assets/{{ item.name }}.yaml"
  loop: "{{ oauths }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.type | default('LDAP') == 'OpenID'
    - item.groupsync is defined
  ansible.builtin.include_tasks: create_sealed_secret.yml

- name: Configure GroupSync object
  loop: "{{ oauths }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.groupsync is defined
  ansible.builtin.template:
    src: groupsync/groupsync.yml.j2
    dest: "{{ openshift_gitops_dir }}/groupsync/assets/groupsync-{{ item.name }}.yaml"

- name: Template nodeselector patches
  loop:
    - groupsync-nodeselector-ns
    - groupsync-nodeselector-sub
  when:
    - groups['infra'] | default([]) | length > 0
  ansible.builtin.template:
    src: groupsync/{{ item }}.yaml.j2
    dest: "{{ openshift_gitops_dir }}/groupsync/patches/{{ item }}.yaml"

- name: Create cluster-admin rolebinding for admin groups
  ansible.builtin.template:
    src: groupsync/cluster-admin-groups-rolebinding.yml.j2
    dest: "{{ openshift_gitops_dir }}/groupsync/assets/cluster-admin-groups-rolebinding.yaml"

- name: Generate kustomization file
  vars:
    gitops_component: groupsync
  ansible.builtin.include_tasks:
    file: generate_kustomization.yml
