---
- name: Get contents of custom_ca_file
  register: custom_ca_file_contents
  delegate_to: "{{ bastion_host }}"
  run_once: true
  when:
    - create_new_cluster is defined
    - custom_ca_file is defined
  ansible.builtin.slurp:
    src: "{{ custom_ca_file }}"

- name: Disable remote health reporting
  when:
    - create_new_cluster is defined
    - disable_remote_health | default(false)
  ansible.builtin.set_fact:
    openshift_pullsecret: |
      {% set _=openshift_pullsecret.auths.__delitem__("cloud.openshift.com") %}
      {{ openshift_pullsecret }}

- name: Template out install-config.yml
  delegate_to: "{{ bastion_host }}"
  run_once: true
  when:
    - create_new_cluster is defined
    - inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.template:
    src: install-config.yml.j2
    dest: "{{ openshift_ignition_dir }}/install-config.yaml"

- name: Delete old (stale) install state file
  delegate_to: "{{ bastion_host }}"
  run_once: true
  when:
    - create_new_cluster is defined
    - inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.file:
    path: "{{ openshift_ignition_dir }}/.openshift_install_state.json"
    state: absent

- name: Run openshift-install to create manifests
  delegate_to: "{{ bastion_host }}"
  run_once: true
  when:
    - create_new_cluster is defined
    - inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.command: "{{ openshift_installer_binary }} --dir={{ openshift_ignition_dir }} create manifests"

- name: Update configs
  loop: "{{ openshift_manifest_customizations }}"
  delegate_to: "{{ bastion_host }}"
  run_once: true
  when:
    - create_new_cluster is defined
    - inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.lineinfile:
    path: "{{ openshift_ignition_dir }}/manifests/{{ item.file }}"
    regexp: "{{ item.regexp | default(omit) }}"
    line: "{{ item.line }}"

- name: Add IPSec config
  delegate_to: "{{ bastion_host }}"
  run_once: true
  when:
    - enable_ipsec
    - openshift_networktype == 'OVNKubernetes'
    - create_new_cluster is defined
    - inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.template:
    src: cluster-network-03-config.yml.j2
    dest: "{{ openshift_ignition_dir }}/manifests/cluster-network-03-config.yml"

- name: Add keepalived config
  delegate_to: "{{ bastion_host }}"
  run_once: true
  when:
    - api_vip is defined
    - ingress_vip is defined
    - create_new_cluster is defined
    - inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.template:
    src: cluster-infrastructure-02-config.yml.j2
    dest: "{{ openshift_ignition_dir }}/manifests/cluster-infrastructure-02-config.yml"

- name: breaky breaky
  run_once: true
  when: break_early is defined
  ansible.builtin.assert:
    that: false
    fail_msg: Breaking on user request

- name: Run openshift-install to create ignition files
  delegate_to: "{{ bastion_host }}"
  run_once: true
  when:
    - create_new_cluster is defined
    - inventory_hostname == ansible_play_hosts_all[0]
  ansible.builtin.command: "{{ openshift_installer_binary }} --dir={{ openshift_ignition_dir }} create ignition-configs"

- name: breaky breaky
  run_once: true
  when: break is defined
  ansible.builtin.assert:
    that: false
    fail_msg: Breaking on user request

- name: Create tempdir
  delegate_to: "{{ bastion_host }}"
  when: installer_tmpdir is defined
  ansible.builtin.file:
    path: "{{ installer_tmpdir }}"
    state: directory

- block:
    - name: Create tempdir for host
      register: ignitiontempdir
      delegate_to: "{{ bastion_host }}"
      ansible.builtin.tempfile:
        path: "{{ installer_tmpdir | default(omit) }}"
        state: directory

    - name: Ensure subdirectories exist
      loop:
        - "{{ ignitiontempdir.path }}/etc/sysconfig/network-scripts"
        - "{{ ignitiontempdir.path }}/etc/NetworkManager/system-connections"
      delegate_to: "{{ bastion_host }}"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        recurse: true

    - name: Template optional NetWorkManger configuration files
      delegate_to: "{{ bastion_host }}"
      when:
        - (create_nmconnection_files | default(False)) == True
      ansible.builtin.shell: /usr/libexec/nm-initrd-generator -c {{ ignitiontempdir.path }}/etc/NetworkManager/system-connections -- {{ coreos_installation_args }}

    - name: template auxiliary network-config
      delegate_to: "{{ bastion_host }}"
      loop:
        - path: "{{ ignitiontempdir.path }}/etc/hostname"
          template: hostname.j2
      ansible.builtin.template:
        src: "{{ item.template }}"
        dest: "{{ item.path }}"

    - name: Set base ignition for workers
      when: ('workers' in group_names) or ('infra' in group_names) or ('storage' in group_names)
      ansible.builtin.set_fact:
        base_ignition_file: worker.ign

    - name: Set base ignition for masters
      when: "'masters' in group_names"
      ansible.builtin.set_fact:
        base_ignition_file: master.ign

    - name: Set base ignition for bootstrap
      when: "'bootstrap' in group_names"
      ansible.builtin.set_fact:
        base_ignition_file: bootstrap.ign

    - name: Assert that base_ignition_file is set
      ansible.builtin.assert:
        that: base_ignition_file in ['master.ign', 'worker.ign', 'bootstrap.ign']
        fail_msg: |
          No base_ignition_file configured for {{ inventory_hostname }}
          Make sure that {{ inventory_hostname }} is a part of one of these groups:
          - storage
          - infra
          - workers
          - masters
          - bootstrap
        success_msg: |
          {{ inventory_hostname }} is configured to use {{ base_ignition_file }} as
          the basis for its Ignition config.

    - name: Transpile meuk into webserver
      command: "{{ filetranspile_binary }} -p -i {{ openshift_ignition_dir }}/{{ base_ignition_file }} -f {{ ignitiontempdir.path }} -o /var/www/html/{{ inventory_hostname
        }}.ign"
      delegate_to: "{{ bastion_host }}"

  always:
    - name: cleanup tempdir
      loop:
        - "{{ ignitiontempdir.path }}"
      delegate_to: "{{ bastion_host }}"
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
